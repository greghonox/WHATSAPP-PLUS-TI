# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Plus-TI\Documents\Projetos\WHATSAPP PLUS TI\UI\main.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from scripts.Whatsapp import *

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(608, 728)
        Form.setMinimumSize(QtCore.QSize(608, 728))
        Form.setMaximumSize(QtCore.QSize(608, 728))
        Form.setStyleSheet("#parar, #comecar{\n"
"    border-radius: 10px;\n"
"    color: #ffffff;\n"
"    background-color: rgb(0, 255, 0);\n"
"    border: 1px solid rgb(40, 40, 40);\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"#parar{\n"
"    border-radius: 10px;\n"
"    color: #ffffff;\n"
"    background-color: rgb(255, 0, 0);\n"
"    border: 1px solid rgb(40, 40, 40);\n"
"    border-color: rgb(0, 0, 0);\n"
"}\n"
"\n"
"#widget_2{\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"QTabWidget:pane, QTabBar::tab{\n"
"border: 1px solid gray;\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"#caminho_csv, #caminho_anexo{\n"
"font: 87 10pt \"Arial Black\";\n"
"}\n"
"\n"
"QTabBar::tab:selected {\n"
"background-color: rgb(225, 255, 220);\n"
"font: 87 10pt \"Arial Black\";\n"
"}\n"
"\n"
"QTabBar::tab{\n"
"font: 10pt \"MS Shell Dlg 2\";\n"
"}\n"
"\n"
"#console{\n"
"background-color: rgb(0, 0, 0);\n"
"font: 75 11pt \"MS Shell Dlg 2\";\n"
"color: rgb(255, 0, 0);\n"
"}\n"
"\n"
"#tab, #tab_2, #tab_4, #widget_3, #widget_4, #widget_5{\n"
"background-color: rgb(225, 255, 220);\n"
"}\n"
"\n"
"#frame, #widget, #textEdit_2{\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"#label{\n"
"image: url(:/img/logo.png);\n"
"}\n"
"\n"
"#label_2{\n"
"image: url(:/img/logo plusti.jpeg);\n"
"}\n"
"\n"
"#label_3{\n"
"font: 75 16pt \"MS Shell Dlg 2\";\n"
"}\n"
"\n"
"#label_3, #label_2, #label, #carregar_anexo, #carregar_lista, #apagar_configuracao{\n"
"border: none;\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"#mensagem{\n"
"background-color: rgb(255, 255, 255);\n"
"}\n"
"\n"
"#sobre, #mensagem_2{ \n"
"background-color: rgb(200, 200, 200);\n"
"}\n"
"\n"
"*{\n"
"font: 75 14pt \"MS Shell Dlg 2\";\n"
"border: 1px solid gray;\n"
"background-color: rgb(220, 220, 220);\n"
"}\n"
"")
        self.verticalLayout = QtWidgets.QVBoxLayout(Form)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame = QtWidgets.QFrame(Form)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setMinimumSize(QtCore.QSize(163, 117))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.label_3 = QtWidgets.QLabel(self.frame)
        font = QtGui.QFont()
        font.setFamily("MS Shell Dlg 2")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(9)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setMinimumSize(QtCore.QSize(58, 117))
        self.label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label.setText("")
        self.label.setTextFormat(QtCore.Qt.RichText)
        self.label.setScaledContents(True)
        self.label.setIndent(-1)
        self.label.setTextInteractionFlags(QtCore.Qt.NoTextInteraction)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.verticalLayout.addWidget(self.frame)
        self.widget_2 = QtWidgets.QWidget(Form)
        self.widget_2.setObjectName("widget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.widget_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.carregar_anexo = QtWidgets.QToolButton(self.widget_2)
        self.carregar_anexo.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/img/picture.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.carregar_anexo.setIcon(icon)
        self.carregar_anexo.setIconSize(QtCore.QSize(63, 59))
        self.carregar_anexo.setPopupMode(QtWidgets.QToolButton.DelayedPopup)
        self.carregar_anexo.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.carregar_anexo.setObjectName("carregar_anexo")
        self.horizontalLayout_3.addWidget(self.carregar_anexo)
        self.carregar_lista = QtWidgets.QToolButton(self.widget_2)
        self.carregar_lista.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/img/arquivos.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.carregar_lista.setIcon(icon1)
        self.carregar_lista.setIconSize(QtCore.QSize(63, 59))
        self.carregar_lista.setPopupMode(QtWidgets.QToolButton.DelayedPopup)
        self.carregar_lista.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.carregar_lista.setObjectName("carregar_lista")
        self.horizontalLayout_3.addWidget(self.carregar_lista)
        self.apagar_configuracao = QtWidgets.QToolButton(self.widget_2)
        self.apagar_configuracao.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/img/cancel.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.apagar_configuracao.setIcon(icon2)
        self.apagar_configuracao.setIconSize(QtCore.QSize(63, 59))
        self.apagar_configuracao.setPopupMode(QtWidgets.QToolButton.DelayedPopup)
        self.apagar_configuracao.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.apagar_configuracao.setObjectName("apagar_configuracao")
        self.horizontalLayout_3.addWidget(self.apagar_configuracao)
        self.verticalLayout.addWidget(self.widget_2)
        self.tabWidget = QtWidgets.QTabWidget(Form)
        self.tabWidget.setMinimumSize(QtCore.QSize(0, 300))
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.East)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.mensagem = QtWidgets.QPlainTextEdit(self.tab)
        self.mensagem.setMinimumSize(QtCore.QSize(0, 200))
        self.mensagem.setStyleSheet("")
        self.mensagem.setObjectName("mensagem")
        self.verticalLayout_2.addWidget(self.mensagem)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/img/negocios-e-financas.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tabWidget.addTab(self.tab, icon3, "")
        self.tab_3 = QtWidgets.QWidget()
        self.tab_3.setObjectName("tab_3")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.tab_3)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.widget_3 = QtWidgets.QWidget(self.tab_3)
        self.widget_3.setObjectName("widget_3")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.widget_3)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.mensagem_2 = QtWidgets.QPlainTextEdit(self.widget_3)
        self.mensagem_2.setStyleSheet("")
        self.mensagem_2.setObjectName("mensagem_2")
        self.verticalLayout_4.addWidget(self.mensagem_2)
        self.verticalLayout_7.addWidget(self.widget_3)
        self.widget_4 = QtWidgets.QWidget(self.tab_3)
        self.widget_4.setObjectName("widget_4")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.widget_4)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.caminho_csv = QtWidgets.QLabel(self.widget_4)
        self.caminho_csv.setObjectName("caminho_csv")
        self.verticalLayout_5.addWidget(self.caminho_csv)
        self.caminho_anexo = QtWidgets.QLabel(self.widget_4)
        self.caminho_anexo.setObjectName("caminho_anexo")
        self.verticalLayout_5.addWidget(self.caminho_anexo)
        self.verticalLayout_7.addWidget(self.widget_4)
        self.widget_5 = QtWidgets.QWidget(self.tab_3)
        self.widget_5.setObjectName("widget_5")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.widget_5)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.label_6 = QtWidgets.QLabel(self.widget_5)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_4.addWidget(self.label_6)
        self.tempo_espera = QtWidgets.QSpinBox(self.widget_5)
        self.tempo_espera.setStyleSheet("TEMPO DE ESPERA NA PAUSA")
        self.tempo_espera.setAlignment(QtCore.Qt.AlignCenter)
        self.tempo_espera.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.tempo_espera.setMinimum(1)
        self.tempo_espera.setMaximum(999)
        self.tempo_espera.setObjectName("tempo_espera")
        self.horizontalLayout_4.addWidget(self.tempo_espera)
        self.verticalLayout_6.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_7 = QtWidgets.QLabel(self.widget_5)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_5.addWidget(self.label_7)
        self.tempo_maximo = QtWidgets.QSpinBox(self.widget_5)
        self.tempo_maximo.setAlignment(QtCore.Qt.AlignCenter)
        self.tempo_maximo.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.tempo_maximo.setMinimum(1)
        self.tempo_maximo.setMaximum(999)
        self.tempo_maximo.setObjectName("tempo_maximo")
        self.horizontalLayout_5.addWidget(self.tempo_maximo)
        self.verticalLayout_6.addLayout(self.horizontalLayout_5)
        self.verticalLayout_7.addWidget(self.widget_5)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/img/setting.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tabWidget.addTab(self.tab_3, icon4, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.tab_2)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.sobre = QtWidgets.QPlainTextEdit(self.tab_2)
        self.sobre.setStyleSheet("")
        self.sobre.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.sobre.setReadOnly(True)
        self.sobre.setObjectName("sobre")
        self.verticalLayout_3.addWidget(self.sobre)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/img/help.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.tabWidget.addTab(self.tab_2, icon5, "")
        self.verticalLayout.addWidget(self.tabWidget)
        self.widget = QtWidgets.QWidget(Form)
        self.widget.setObjectName("widget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.parar = QtWidgets.QToolButton(self.widget)
        self.parar.setIconSize(QtCore.QSize(63, 59))
        self.parar.setPopupMode(QtWidgets.QToolButton.DelayedPopup)
        self.parar.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.parar.setObjectName("parar")
        self.horizontalLayout_2.addWidget(self.parar)
        self.comecar = QtWidgets.QToolButton(self.widget)
        self.comecar.setIconSize(QtCore.QSize(63, 59))
        self.comecar.setPopupMode(QtWidgets.QToolButton.DelayedPopup)
        self.comecar.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        self.comecar.setObjectName("comecar")
        self.horizontalLayout_2.addWidget(self.comecar)
        self.verticalLayout.addWidget(self.widget)
        self.console = QtWidgets.QListWidget(Form)
        self.console.setObjectName("console")
        item = QtWidgets.QListWidgetItem()
        self.console.addItem(item)
        self.verticalLayout.addWidget(self.console)

        self.retranslateUi(Form)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "PLUS-TI -- AUTOMACAO DE ENVIO DE MENSAGEM"))
        self.label_3.setText(_translate("Form", "ENVIO MENSAGEM WHATSAPP"))
        self.label.setToolTip(_translate("Form", "<html><head/><body><p>SE PRECISA DA MINHA AJUDA CLIQUE DUAS VEZES AQUI!</p></body></html>"))
        self.carregar_anexo.setToolTip(_translate("Form", "<html><head/><body><p>Selecione uma imagem para envio, suportada pelo whatsapp</p></body></html>"))
        self.carregar_lista.setToolTip(_translate("Form", "<html><head/><body><p>Selecione o arquivo txt para envio. Lembre-se o formato das linhas são: telefone contato; nome contato</p></body></html>"))
        self.apagar_configuracao.setToolTip(_translate("Form", "<html><head/><body><p>APAGUE TODA A CONFIGURAÇÃO FEITA</p></body></html>"))
        self.tabWidget.setToolTip(_translate("Form", "<html><head/><body><p>REALIZE ALGUNS AJUSTES PARA MELHOR EFICIENCIA</p></body></html>"))
        self.mensagem.setToolTip(_translate("Form", "<html><head/><body><p>Você pode preencher o campo de texto de forma livre. Para chamar referencia do contato utilize {nome_contato} para concaternar com o texto.</p></body></html>"))
        self.mensagem.setPlainText(_translate("Form", "Seu texto posicionando o {nome_contato} para realizar o disparo sitando o nome do contato..."))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("Form", "PROGRESSO"))
        self.mensagem_2.setToolTip(_translate("Form", "<html><head/><body><p>Você pode preencher o campo de texto de forma livre. Para chamar referencia do contato utilize {nome_contato} para concaternar com o texto.</p></body></html>"))
        self.mensagem_2.setPlainText(_translate("Form", "Configure para ter um desempenho ajustavel.\n"
"O numero máximo de disparos até acontecer a pausa.\n"
"O tempo de pausa é exatamento o tempo de espera que o robô fará."))
        self.caminho_csv.setText(_translate("Form", "CAMINHO DO CSV"))
        self.caminho_anexo.setText(_translate("Form", "CAMINHO DO ANEXO"))
        self.label_6.setToolTip(_translate("Form", "<html><head/><body><p>TEMPO DE ESPERA NA PAUSA</p></body></html>"))
        self.label_6.setText(_translate("Form", "TEMPO ESPERA"))
        self.label_7.setToolTip(_translate("Form", "<html><head/><body><p>QUANTIDADE QUE SERÁ FEITO O DISPARA ATÉ A PAUSA.</p></body></html>"))
        self.label_7.setText(_translate("Form", "QUANTIDADE MAXIMA"))
        self.tempo_maximo.setToolTip(_translate("Form", "<html><head/><body><p>QUANTIDADE QUE SERÁ FEITO O DISPARA ATÉ A PAUSA.</p></body></html>"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_3), _translate("Form", "CONF"))
        self.sobre.setPlainText(_translate("Form", "Somos a Plus-TI.\n"
"\n"
"Ferramenta de disparo pelo whatsapp.\n"
"\n"
"Instruções de uso dessa ferramenta:\n"
"Selecione uma lista com o formato: \n"
"numero telefone; nome do contato\n"
"Arquivo em formato texto.\n"
"\n"
"Selecione uma imagem suportada pelo whastapp.\n"
"\n"
"Texto:\n"
"Você pode preencher o campo de texto de forma livre. Para chamar referencia do contato utilize {nome_contato} para concaternar com o texto."))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("Form", "SOBRE"))
        self.parar.setToolTip(_translate("Form", "<html><head/><body><p>Para o envio das mensagens.</p></body></html>"))
        self.parar.setText(_translate("Form", "PARAR"))
        self.comecar.setToolTip(_translate("Form", "<html><head/><body><p>Vamos começar? Pressione aqui depois de carregar a lista de contatos.</p></body></html>"))
        self.comecar.setText(_translate("Form", "COMEÇAR"))
        self.console.setToolTip(_translate("Form", "<html><head/><body><p>Log dos eventos</p></body></html>"))
        __sortingEnabled = self.console.isSortingEnabled()
        self.console.setSortingEnabled(False)
        item = self.console.item(0)
        item.setText(_translate("Form", "PLUST-TI -- TECNOLOGIA DA INFORMAÇÃO"))
        self.console.setSortingEnabled(__sortingEnabled)
        self.carregarJanela(Form)
        
    def carregarJanela(self, Form): 
        self.janela = Form
        self.motor = WhatsApp()
        self.carregarEventos()

    def carregarEventos(self):
        self.carregar_anexo.clicked.connect(self.carregarAnexo)
        self.carregar_lista.clicked.connect(self.carregarLista)
        self.comecar.clicked.connect(self.comecarDisparar)
        self.apagar_configuracao.clicked.connect(self.apagarConfig)
        self.parar.clicked.connect(self.pararDisparos)
        #self.label.mouseDoubleClickEvent = self.pedirAjuda
        #self.label_2.mouseDoubleClickEvent = self.pedirAjuda
        #self.label_3.mouseDoubleClickEvent = self.pedirAjuda
        self.carregarConfig()
        
    def apagarConfig(self):
        msg = QtWidgets.QMessageBox.question(None, self.janela.windowTitle(), 'Você deseja limpar os dados para ser preenchido posteriormente?')
        if(msg == QtWidgets.QMessageBox.Yes):
            self.mensagem.setPlainText("Seu texto posicionando o {nome_contato} para realizar o disparo sitando o nome do contato...")
            self.caminho_csv.setText('CAMINHO DO CSV')
            self.caminho_anexo.setText('CAMINHO DO ANEXO')
            self.tempo_espera.setValue(1)
            self.tempo_maximo.setValue(1)
    
    def pedirAjuda(self, event):
        try: get().open(f"https://api.whatsapp.com/send?phone=55{TELEFONE_AJUDA}&text=Ola, Sou da Forte Veiculos e estou precisando de ajuda")
        except Exception as erro: self.log(f'NAO FOI POSSIVEL ABRIR O NAVEGADOR {erro}', False)
        return f'PEDINDO AJUDA', True
    
    def log(self, msg, tipo=True):
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/newPrefix/check-mark.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/newPrefix/cancel.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/newPrefix/warning.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        msg = DateTime() + ' ' + msg.replace('\n', '')
        linha = msg
        linha = split('\s{4,}', linha)[0]
        item = QtWidgets.QListWidgetItem(f"{linha}", self.console)
        item.setIcon(icon2 if('ERRO' in linha) else icon3 if('ATENCAO' in linha) else icon1)
        self.console.setCurrentRow(self.console.count()-1)
        Log(msg, tipo)
                
    def pararDisparos(self): 
        try: self.tarefa.terminate()
        except Exception as erro: print(f'ERRO EM TENTAR PARAR O ROBO {erro}')
    
    rodando = True
    def comecarDisparar(self): 
        self.gravarMensagemArquivo()
        if(self.caminho_csv == 'CAMINHO DO CSV'): QtWidgets.QMessageBox.information(None, self.janela.windowTitle(), 'VOCÊ PRECISA DEFINIR UM ARQUIVO CSV PARA INICIAR!'); return
        
        if(self.rodando):
            self.tarefa = Rodar({'lista_telefones': self.caminho_csv.text(), 
                                 'mensagem': self.mensagem.toPlainText(), 'anexo': self.caminho_anexo.text(),
                                 'motor': self.motor, 'log': self.log, 'tempo_espera': self.tempo_espera.value(),
                                 'tempo_maximo': self.tempo_maximo.value(), 'planilhaSombra': self.planilhaSombra})
            self.tarefa.start()
            self.tarefa.fim.connect(self.atualizarLog)
            # self.tarefa.ini.connect(self.salvarPlanilha)
        else:
            print('finalizando o what')
            self.tarefa.terminate()
        self.rodando = not self.rodando            
        return 'CARREGANDO EVENTOS', True
    
    def atualizarLog(self, msg, tipo=True):
        self.log(msg.replace('\n', ''), tipo)
        self.rodando = False
        
    def carregarConfig(self):
        def carregarPlanilhaSombra(arquivo):
            f = lambda x: x.split(';')
            l = lambda x: x.replace('\n', '')
            with open(arquivo, 'r', encoding='utf-8', errors='ignore') as arq:
                self.planilhaSombra = [{'nome': f(i)[0], 'telefone': f(i)[1], 'status': l(f(i)[2])} for i in arq.readlines()]
                    
        print('CARREGANDO CONFIGURACOES!')
        if(isfile(ARQUIVO_MSG)):
            try:
                with open(ARQUIVO_MSG, 'r', encoding='utf-8', errors='ignore') as arq:
                    json = literal_eval(arq.read())
                    self.mensagem.setPlainText(json['mensagem'])
                    self.caminho_csv.setText(json['caminho_csv']),
                    self.caminho_anexo.setText(json['caminho_anexo'])
                    self.tempo_espera.setValue(json['tempo_espera'])
                    self.tempo_maximo.setValue(json['tempo_maximo'])
            except Exception as erro: return f"ERRO EM ABRIR O ARQUIVO {ARQUIVO_MSG} ERRO: {erro}"
        
        if(isfile(self.caminho_csv.text().split('.')[0] + '_swp.csv')):
            carregarPlanilhaSombra(self.caminho_csv.text().split('.')[0] + '_swp.csv')
        else: self.planilhaSombra = {}

    def gravarMensagemArquivo(self):
        try: 
            with open(ARQUIVO_MSG, 'w', encoding='utf-8', errors='ignore') as arq:
                dump({'mensagem': self.mensagem.toPlainText(), 'caminho_csv': self.caminho_csv.text(),
                      'caminho_anexo': self.caminho_anexo.text(), 'tempo_espera': self.tempo_espera.value(), 
                      'tempo_maximo': self.tempo_maximo.value()}, arq, indent=4, ensure_ascii=False)
        except Exception as erro: QtWidgets.QMessageBox.warning(None, self.janela.windowTitle(), f'ERRO ENCONTRADO AO TENTAR GRAVAR {ARQUIVO_MSG} ERRO: {erro}')
        return 'GRAVANDO MENSAGEM EM ARQUIVO', True
    
    def carregarLista(self): 
        arquivo = QtWidgets.QFileDialog.getOpenFileName(None, self.janela.windowTitle(), 'lista telefones', "*.csv")
        if(arquivo[0] != ''):
            self.caminho_csv.setText(arquivo[0])
            return f'CARREGANDO {arquivo}', True
    
    def carregarAnexo(self): 
        arquivo = QtWidgets.QFileDialog.getOpenFileName(None, self.janela.windowTitle(), 'imagem anexo', "*.png, *.jpg, *.jpeg")
        if(arquivo[0] != ''):
            self.caminho_anexo.setText(arquivo[0])

    def salvarPlanilha(self, msg):
        ' SALVA A LINHA QUE ESTA SENDO PROCESSADA '
        def salvarSombra(msg):
            try:
                arquivo = self.caminho_csv.text().split('.')[0] + '_swp.csv'
                if(not isfile(arquivo)): msg = 'nome;telefone;status\n' + msg
                with open(arquivo, 'a', encoding='utf-8', errors='ignore') as arq: 
                    arq.write(msg + '\n'); return True
            except Exception as erro: self.log(f'ERRO EM SALVAR SOMBRA {erro}', False); return False
            
        try:
            salvarSombra(msg) 
            return True
        except Exception as erro: self.log(f'ERRO EM SALVAR PLANILHA {erro}', False); return False

        
class Rodar(QThread):
    fim = pyqtSignal(str)
    ini = pyqtSignal(str)
    def __init__(self, obj):
        super().__init__()  
        self.lista_telefones = obj['lista_telefones']   
        self.planilhaSombra = obj['planilhaSombra']
        self.tempo_espera = obj['tempo_espera']
        self.tempo_maximo = obj['tempo_maximo']
        self.msg = obj['mensagem']
        self.motor = obj['motor']
        self.anexo = obj['anexo']
        self.log = obj['log']
        
    def carregarTxt(self):
        try: 
            with open(self.lista_telefones, 'r', encoding='utf-8', errors='ignore') as arq:
                return arq.readlines()
        except Exception as erro: print(f'OCORREU UM ERRO EM LER {self.lista_telefones} {erro}'); return []

    def run(self):
        self.fim.emit('*' *100)
        self.fim.emit('\nINICIANDO A ROTINA')
        self.motor.main()
        contagem = 1
        try: 
            # telefones = [x['telefone'] for x in self.planilhaSombra]
            for linha in self.carregarTxt():
                # if(linha.split(';')[1] in telefones): 
                #     self.log(f"NUMERO {linha.split(';')[1]} JÁ PROCESSADO ANTES", None); continue
                
                if(contagem == self.tempo_maximo):
                    self.log(f'CHEGOU A HORA DE DISCANSAR {self.tempo_espera} EM SEGUNDOS', None)
                    sleep(self.tempo_espera)
                    self.log('ACABOU A FOLGA, VOLTANDO A TRABALHAR', None)
                    contagem = 1
                contagem += 1
                if(not self.motor.rodando): break
                
                msg = self.msg.format(nome_contato=linha.split(';')[0])
                numero = linha.split(';')[1]
                self.motor.enviar(numero, msg, self.anexo, self.log)
                self.ini.emit(f"{linha.split(';')[0]};{numero};OK")
                self.log(f"ENVIANDO PARA {numero} {msg[:80]}")
        except Exception as erro: self.log(f'OCORREU UM ERRO EM ABRIR O ARQUIVO CSV {erro}', False)
        self.fim.emit('FINALIZANDO A ROTINA')
        
    def terminate(self):
        self.log(f'FINALIZANDO WHATSAPP', False)
        self.motor.rodando = False
        self.motor.fecharWhats()
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())